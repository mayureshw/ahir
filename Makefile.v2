# Pending binaries
# formatVhdlFiles.py
# ghdlSanitize.sh

# LIBS are .a, not to be installed, consumed for build (to be confirmed)
# .so exist, but have to confirm whether they are to be installed

# Dependencies: boost, antlr2, llvm

#CXX		=	/usr/bin/c++
CXXFLAGS+=  -I/usr/pkg/include -MMD -MP --std=c++17
ANTLR	=	antlr
AR		=	ar
ARFLAGS	=	rcs
LDFLAGS	+=	-L/usr/pkg/lib -lantlr -lboost_filesystem -Wl,-rpath,/usr/pkg/lib

PROJECTS	=	AHIRASM HIERSYS LIBAHIR BITVECS VALUE FNLIB IOLIB VERSION CTESTBENCH BGLWRAP #LLVM2AA

AHIRASM_DIR	=	Ahir-asm/devel
AHIRASM_BINS=	Aa2C Aa2VC AaLinkExtMem AaOpt AaPreprocess
AHIRASM_LIBS=	Aa
AHIRASM_GRAM=	Aa

HIERSYS_DIR	=	HierSysBuild
HIERSYS_BINS=	hierSys2C hierSys2Vhdl hierSysCheck hierSysGenVhdlComponentsPackage hierSysPartition hierSysUniquify
HIERSYS_LIBS=	HierSys
HIERSYS_GRAM=	hierSys

LIBAHIR_DIR	=	libAhirV2
LIBAHIR_BINS=	vc2vhdl vcAnalyze vcFormat vcParse vhdlFormat
LIBAHIR_LIBS=	VC
LIBAHIR_GRAM=	vc
vcParse_SRCS=	$(LIBAHIR_DIR)/util/vcParseMain.cpp

#LLVM2AA_DIR	=	llvmbc2Aa
#LLVM2AA_BINS=	llvm2aa
#llvm2aa_SRCS=	$(wildcard $(LLVM2AA_DIR)/src/*.cpp)

BITVECS_DIR	=	BitVectors
BITVECS_LIBS=	BitVectors

VALUE_DIR	=	Value
VALUE_LIBS	=	Value

FNLIB_DIR	=	functionLibrary
FNLIB_LIBS	=	fpu llvm_intrinsics timer

IOLIB_DIR	=	iolib
IOLIB_LIBS	=	io

VERSION_DIR	=	version
VERSION_LIBS=	AhirVersion

CTESTBENCH_DIR=	CtestBench

BGLWRAP_DIR=	BGLWrap


# # # # # Usually no change should be required below this point # # # # #

# Convention:
# For BINS, binary name has a corresponding utils/<bin>.cpp program, unless <BIN>_SRCS is defined
# If a project has a single LIB, build from src/*.cpp
# If a project has multiple LIBS, for each source there is corresponding src/<lib>.c
# If a project has no LIBS, use all sources for the BIN
# We use all include directories for compilation and all libs for linking, to keep it simple


BINS	=	$(foreach p,$(PROJECTS), $(addprefix $($(p)_DIR)/bin/, $($(p)_BINS)))
LIBS	=	$(foreach p,$(PROJECTS), $(addsuffix .a,$(addprefix $($(p)_DIR)/lib/lib, $($(p)_LIBS))))
INCDIRS	=	$(foreach p,$(PROJECTS), $($(p)_DIR)/include) $(foreach p,$(PROJECTS),$(foreach g,$(p)_GRAM,$($(p)_DIR)/src))
CXXFLAGS+=	$(addprefix -I,$(INCDIRS))

%.o:	%.cpp | $(GENSRCS)
	$(CXX) $(CXXFLAGS) -c $< -o $@

%.o:	%.c | $(GENSRCS)
	$(CC) $(CXXFLAGS) -c $< -o $@

define f_ANTLROPS
$(addprefix $($(1)_DIR)/src/, $(foreach g,$($(1)_GRAM), $(foreach suf,Lexer Parser, $(foreach ext,.hpp .cpp, $(g)$(suf)$(ext)))))
endef

define f_ANTLRINP
$(foreach g,$($(1)_GRAM),$($(1)_DIR)/grammar/$(g).g)
endef

define f_LIBSRCS
$(if $(filter-out 1,$(words $($(1)_LIBS))),\
	$($(1)_DIR)/src/$(2).c,\
	$(sort $(wildcard $($(1)_DIR)/src/*.cpp) $(filter %.cpp,$(call f_ANTLROPS,$(1)))))
endef

define f_BINSRCS
$(if $($(2)_SRCS),\
	$($(2)_SRCS),\
	$($(1)_DIR)/util/$(2).cpp)
endef

define f_SRC2O
$(subst .c,.o,$(subst .cpp,.o,$(1)))
endef

define f_ALLSRCS
endef

define LIBRULES
$($(1)_DIR)/lib/lib$(2).a: $(call f_SRC2O, $(call f_LIBSRCS,$(1),$(2)))
	mkdir -p $($(1)_DIR)/lib && \
	$(AR) $(ARFLAGS) $($(1)_DIR)/lib/lib$(2).a $(call f_SRC2O, $(call f_LIBSRCS,$(1),$(2)))

endef

define BINRULES
$($(1)_DIR)/bin/$(2): $(call f_SRC2O, $(call f_BINSRCS,$(1),$(2))) $(LIBS)
	mkdir -p $($(1)_DIR)/bin && \
	$(CXX) $(call f_SRC2O, $(call f_BINSRCS,$(1),$(2))) $(LIBS) $(LDFLAGS) -o $($(1)_DIR)/bin/$(2)

endef

define PROJRULES

$(call f_ANTLROPS,$(1)) &: $(call f_ANTLRINP,$(1))
	$(ANTLR) -o $($(1)_DIR)/src $(call f_ANTLRINP,$(1))

$(foreach l,$($(1)_LIBS),$(call LIBRULES,$(1),$(l)))

$(foreach b,$($(1)_BINS),$(call BINRULES,$(1),$(b)))

endef


all: $(BINS)


BINOBJS=	$(foreach p,$(PROJECTS),$(foreach b,$($(p)_BINS),$(call f_SRC2O,$(call f_BINSRCS,$(p),$(b)))))
LIBOBJS=	$(foreach p,$(PROJECTS),$(foreach l,$($(p)_LIBS),$(call f_SRC2O,$(call f_LIBSRCS,$(p),$(l)))))
GENSRCS=	$(foreach p,$(PROJECTS),$(call f_ANTLROPS,$(p)))
DFILES=		$(BINOBJS:.o=.d) $(LIBOBJS:.o=.d)
-include $(DFILES)

clean:
	rm -f $(BINS) $(LIBS) $(BINOBJS) $(LIBOBJS) $(GENSRCS) $(DFILES)
clean-bins:
	rm -f $(BINS)
clean-libs:
	rm -f $(LIBS)
clean-gensrcs:
	rm -f $(GENSRCS)
clean-objs:
	rm -f $(BINOBJS) $(LIBOBJS) $(DFILES)

$(foreach p, $(PROJECTS), $(eval $(call PROJRULES,$(p))))
